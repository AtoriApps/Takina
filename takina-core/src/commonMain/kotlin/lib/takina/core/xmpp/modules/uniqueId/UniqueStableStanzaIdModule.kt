
package lib.takina.core.xmpp.modules.uniqueId

import lib.takina.core.Context
import lib.takina.core.builder.TakinaConfigDsl
import lib.takina.core.modules.*
import lib.takina.core.xml.Element
import lib.takina.core.xmpp.BareJID
import lib.takina.core.xmpp.ErrorCondition
import lib.takina.core.xmpp.XMPPException
import lib.takina.core.xmpp.stanzas.Message

@TakinaConfigDsl
interface UniqueStableStanzaIdModuleConfig

/**
 * Module is implementing Unique and Stable Stanza IDs ([XEP-0359](https://xmpp.org/extensions/xep-0359.html)).
 */
class UniqueStableStanzaIdModule(override val context: Context) : XmppModule,
    UniqueStableStanzaIdModuleConfig {

    /**
     * Module is implementing Unique and Stable Stanza IDs ([XEP-0359](https://xmpp.org/extensions/xep-0359.html)).
     */
    companion object : XmppModuleProvider<UniqueStableStanzaIdModule, UniqueStableStanzaIdModuleConfig> {

        const val XMLNS = "urn:xmpp:sid:0"
        override val TYPE = XMLNS

        override fun instance(context: Context): UniqueStableStanzaIdModule = UniqueStableStanzaIdModule(context)

        override fun configure(module: UniqueStableStanzaIdModule, cfg: UniqueStableStanzaIdModuleConfig.() -> Unit) =
            module.cfg()

        override fun doAfterRegistration(module: UniqueStableStanzaIdModule, moduleManager: ModulesManager) =
            moduleManager.registerOutgoingFilter(createFilter(module::beforeSend))


    }

    override val type = TYPE
    override val criteria: Criteria? = null
    override val features = arrayOf(XMLNS)

    override fun process(element: Element) = throw XMPPException(ErrorCondition.BadRequest)

    private fun beforeSend(element: Element?, chain: StanzaFilterChain) {
        if (element?.name == Message.NAME && element.attributes["id"] != null && element.getChildrenNS(
                "origin-id",
                XMLNS
            ) == null
        ) {
            element.add(lib.takina.core.xml.element("origin-id") {
                xmlns = XMLNS
                attributes["id"] = element.attributes["id"]
            })
        }
        chain.doFilter(element)
    }

    fun getStanzaID(element: Element): String? {
        val jid = context.boundJID?.bareJID ?: return null
        return element.getStanzaIDBy(jid)
    }

}

/**
 * Returns Stanza ID generated by given XMPP entity.
 * @param by JabberID of creator of stanza ID.
 */
fun Element.getStanzaIDBy(by: BareJID): String? {
    val stanzaId = this.children.firstOrNull {
        it.name == "stanza-id" && it.xmlns == UniqueStableStanzaIdModule.XMLNS && it.attributes["by"] == by.toString()
    } ?: return null
    return stanzaId.attributes["id"]
}

/**
 * Returns Origin stanza ID.
 */
fun Element.getOriginID(): String? =
    this.getChildrenNS("origin-id", UniqueStableStanzaIdModule.XMLNS)?.attributes?.get("id")

